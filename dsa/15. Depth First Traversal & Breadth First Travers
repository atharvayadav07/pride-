Concepts:
*DFS (Depth First Search)
Traversals:

*Preorder (Root → Left → Right)

*Inorder (Left → Root → Right)

*Postorder (Left → Right → Root)

*BFS (Breadth First Search)

*Also known as Level Order Traversal


#include <stdio.h>
#include <stdlib.h>

// Define structure
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Create new node
struct Node* newNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->left = node->right = NULL;
    return node;
}

// DFS Traversals
void preorder(struct Node* root) {
    if (root) {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}

void inorder(struct Node* root) {
    if (root) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

void postorder(struct Node* root) {
    if (root) {
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->data);
    }
}

// Queue for BFS
struct Node* queue[100];
int front = -1, rear = -1;

void enqueue(struct Node* node) {
    if (rear < 99) {
        queue[++rear] = node;
        if (front == -1) front = 0;
    }
}

struct Node* dequeue() {
    if (front > rear) return NULL;
    return queue[front++];
}

int isEmpty() {
    return front == -1 || front > rear;
}

// BFS Traversal
void bfs(struct Node* root) {
    if (root == NULL) return;

    enqueue(root);
    while (!isEmpty()) {
        struct Node* temp = dequeue();
        printf("%d ", temp->data);

        if (temp->left) enqueue(temp->left);
        if (temp->right) enqueue(temp->right);
    }
}

int main() {
    struct Node* root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);

    printf("DFS - Preorder: ");
    preorder(root);     // 1 2 4 5 3

    printf("\nDFS - Inorder: ");
    inorder(root);      // 4 2 5 1 3

    printf("\nDFS - Postorder: ");
    postorder(root);    // 4 5 2 3 1

    printf("\nBFS - Level Order: ");
    bfs(root);          // 1 2 3 4 5

    return 0;
}


 Output 
DFS - Preorder:   1 2 4 5 3  
DFS - Inorder:    4 2 5 1 3  
DFS - Postorder:  4 5 2 3 1  
BFS - Level Order: 1 2 3 4 5
