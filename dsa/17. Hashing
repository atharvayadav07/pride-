#include <stdio.h>
#define TABLE_SIZE 10

int hashTable[TABLE_SIZE];

void init() {
    for (int i = 0; i < TABLE_SIZE; i++)
        hashTable[i] = -1;
}

// Hash function
int hash(int key) {
    return key % TABLE_SIZE;
}

// Insert
void insert(int key) {
    int index = hash(key);

    // Linear Probing
    while (hashTable[index] != -1) {
        index = (index + 1) % TABLE_SIZE;
    }
    hashTable[index] = key;
}

// Search
int search(int key) {
    int index = hash(key);
    int start = index;

    while (hashTable[index] != -1) {
        if (hashTable[index] == key)
            return index;
        index = (index + 1) % TABLE_SIZE;
        if (index == start) break; // full loop
    }
    return -1;
}

// Display
void display() {
    for (int i = 0; i < TABLE_SIZE; i++)
        printf("%d => %d\n", i, hashTable[i]);
}

int main() {
    init();
    insert(10);
    insert(20);
    insert(30);
    insert(25);

    display();

    int key = 30;
    int idx = search(key);
    if (idx != -1)
        printf("Found %d at index %d\n", key, idx);
    else
        printf("%d not found!\n", key);

    return 0;
}
