Here is a complete implementation of a Circular Linked List (CLL) in both C and Python, including:

Insertion at end

Deletion of a node

Traversal (Display)








#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* head = NULL;

// Insert at end
void insert(int data) {
    struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));
    newNode->data = data;
    if (head == NULL) {
        head = newNode;
        newNode->next = head;
    } else {
        struct Node* temp = head;
        while (temp->next != head)
            temp = temp->next;
        temp->next = newNode;
        newNode->next = head;
    }
}

// Delete a node
void delete(int key) {
    if (head == NULL) return;

    struct Node *curr = head, *prev = NULL;

    // If node to be deleted is head
    if (head->data == key) {
        struct Node* last = head;
        while (last->next != head)
            last = last->next;

        if (head == head->next) {
            free(head);
            head = NULL;
            return;
        }

        last->next = head->next;
        free(head);
        head = last->next;
        return;
    }

    do {
        prev = curr;
        curr = curr->next;
        if (curr->data == key) {
            prev->next = curr->next;
            free(curr);
            return;
        }
    } while (curr != head);
}

// Display circular linked list
void display() {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }
    struct Node* temp = head;
    do {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("(Back to head)\n");
}

int main() {
    insert(10);
    insert(20);
    insert(30);
    display();  // 10 -> 20 -> 30 -> (Back to head)

    delete(20);
    display();  // 10 -> 30 -> (Back to head)

    return 0;
}
